import { CipherString } from '../models/domain/cipherString';
import { SymmetricCryptoKey } from '../models/domain/symmetricCryptoKey';
import { ProfileOrganizationResponse } from '../models/response/profileOrganizationResponse';
import { CryptoService as CryptoServiceInterface } from '../abstractions/crypto.service';
import { StorageService as StorageServiceInterface } from '../abstractions/storage.service';
export declare class CryptoService implements CryptoServiceInterface {
    private storageService;
    private secureStorageService;
    private key;
    private encKey;
    private legacyEtmKey;
    private keyHash;
    private privateKey;
    private orgKeys;
    constructor(storageService: StorageServiceInterface, secureStorageService: StorageServiceInterface);
    setKey(key: SymmetricCryptoKey): Promise<any>;
    setKeyHash(keyHash: string): Promise<{}>;
    setEncKey(encKey: string): Promise<{}>;
    setEncPrivateKey(encPrivateKey: string): Promise<{}>;
    setOrgKeys(orgs: ProfileOrganizationResponse[]): Promise<{}>;
    getKey(): Promise<SymmetricCryptoKey>;
    getKeyHash(): Promise<string>;
    getEncKey(): Promise<SymmetricCryptoKey>;
    getPrivateKey(): Promise<ArrayBuffer>;
    getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>>;
    getOrgKey(orgId: string): Promise<SymmetricCryptoKey>;
    clearKey(): Promise<any>;
    clearKeyHash(): Promise<any>;
    clearEncKey(memoryOnly?: boolean): Promise<any>;
    clearPrivateKey(memoryOnly?: boolean): Promise<any>;
    clearOrgKeys(memoryOnly?: boolean): Promise<any>;
    clearKeys(): Promise<any>;
    toggleKey(): Promise<any>;
    makeKey(password: string, salt: string): SymmetricCryptoKey;
    hashPassword(password: string, key: SymmetricCryptoKey): Promise<string>;
    makeEncKey(key: SymmetricCryptoKey): Promise<CipherString>;
    encrypt(plainValue: string | Uint8Array, key?: SymmetricCryptoKey, plainValueEncoding?: string): Promise<CipherString>;
    encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<ArrayBuffer>;
    decrypt(cipherString: CipherString, key?: SymmetricCryptoKey, outputEncoding?: string): Promise<string>;
    decryptFromBytes(encBuf: ArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer>;
    rsaDecrypt(encValue: string): Promise<string>;
    private aesEncrypt(plainValue, key);
    private aesDecrypt(encType, ctBytes, ivBytes, macBytes, key);
    private aesDecryptWC(encType, ctBuf, ivBuf, macBuf, key);
    private computeMac(dataBytes, macKey, b64Output);
    private computeMacWC(dataBuf, macKeyBuf);
    private macsEqual(macKey, mac1, mac2);
    private macsEqualWC(macKeyBuf, mac1Buf, mac2Buf);
    private getKeyForEncryption(key?);
    private resolveLegacyKey(encType, key);
}
